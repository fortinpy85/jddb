"""Add Lightcast skills tables and job_description_skills association

Revision ID: 465a48a9e37f
Revises: add_rlhf_feedback
Create Date: 2025-10-04 23:11:04.056030

"""

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision = "465a48a9e37f"
down_revision = "add_rlhf_feedback"
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "skills",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("lightcast_id", sa.String(length=50), nullable=False),
        sa.Column("name", sa.String(length=500), nullable=False),
        sa.Column("skill_type", sa.String(length=100), nullable=True),
        sa.Column("description", sa.Text(), nullable=True),
        sa.Column("category", sa.String(length=200), nullable=True),
        sa.Column("subcategory", sa.String(length=200), nullable=True),
        sa.Column(
            "skill_metadata", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_skills_id"), "skills", ["id"], unique=False)
    op.create_index(
        op.f("ix_skills_lightcast_id"), "skills", ["lightcast_id"], unique=True
    )
    op.create_index(op.f("ix_skills_name"), "skills", ["name"], unique=False)
    op.create_index(
        op.f("ix_skills_skill_type"), "skills", ["skill_type"], unique=False
    )
    op.create_table(
        "job_description_skills",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("job_id", sa.Integer(), nullable=False),
        sa.Column("skill_id", sa.Integer(), nullable=False),
        sa.Column("confidence", sa.Float(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.ForeignKeyConstraint(
            ["job_id"], ["job_descriptions.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["skill_id"], ["skills.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_job_description_skills_id"),
        "job_description_skills",
        ["id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_job_description_skills_job_id"),
        "job_description_skills",
        ["job_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_job_description_skills_skill_id"),
        "job_description_skills",
        ["skill_id"],
        unique=False,
    )
    # Drop dependent tables first to avoid foreign key constraint errors
    # Order: child tables before parent tables

    # Drop tables with no dependencies
    op.drop_index(op.f("idx_audit_log_event_type"), table_name="audit_log")
    op.drop_index(
        op.f("idx_audit_log_failures"),
        table_name="audit_log",
        postgresql_where="(success = false)",
    )
    op.drop_index(op.f("idx_audit_log_resource"), table_name="audit_log")
    op.drop_index(op.f("idx_audit_log_session_id"), table_name="audit_log")
    op.drop_index(op.f("idx_audit_log_severity"), table_name="audit_log")
    op.drop_index(op.f("idx_audit_log_success"), table_name="audit_log")
    op.drop_index(op.f("idx_audit_log_timestamp"), table_name="audit_log")
    op.drop_index(op.f("idx_audit_log_user_id"), table_name="audit_log")
    op.drop_table("audit_log")
    op.drop_table("classification_benchmarks")
    op.drop_table("career_paths")
    op.drop_index(op.f("idx_user_analytics_user_id"), table_name="user_analytics")
    op.drop_table("user_analytics")

    # Drop content_approvals before content_workflows
    op.drop_table("content_approvals")
    op.drop_index(op.f("idx_content_workflows_job_id"), table_name="content_workflows")
    op.drop_table("content_workflows")

    # Drop ai_content_enhancements before ai_providers
    op.drop_index(
        op.f("idx_ai_content_enhancements_job_id"), table_name="ai_content_enhancements"
    )
    op.drop_table("ai_content_enhancements")
    op.drop_table("ai_providers")

    # Drop websocket_connections, document_changes, and editing_participants before editing_sessions
    op.drop_index(
        op.f("idx_websocket_connections_user_id"), table_name="websocket_connections"
    )
    op.drop_table("websocket_connections")
    op.drop_index(
        op.f("idx_document_changes_session_id"), table_name="document_changes"
    )
    op.drop_index(op.f("idx_document_changes_user_id"), table_name="document_changes")
    op.drop_table("document_changes")
    op.drop_table("editing_participants")
    op.drop_index(
        op.f("idx_editing_sessions_created_by"), table_name="editing_sessions"
    )
    op.drop_index(op.f("idx_editing_sessions_job_id"), table_name="editing_sessions")
    op.drop_table("editing_sessions")

    # Drop translation_embeddings before translation_memory
    op.drop_index(
        op.f("idx_translation_embeddings_memory_id"),
        table_name="translation_embeddings",
    )
    op.drop_index(
        op.f("idx_translation_embeddings_vector_cosine"),
        table_name="translation_embeddings",
        postgresql_ops={"embedding": "vector_cosine_ops"},
        postgresql_with={"m": "16", "ef_construction": "64"},
        postgresql_using="hnsw",
    )
    op.drop_table("translation_embeddings")
    # Drop translation_memory before translation_projects
    op.drop_index(
        op.f("idx_translation_memory_project_id"), table_name="translation_memory"
    )
    op.drop_table("translation_memory")
    op.drop_table("translation_projects")
    op.create_index(
        op.f("ix_ai_usage_tracking_id"), "ai_usage_tracking", ["id"], unique=False
    )
    # Clean up orphaned content_chunks before making job_id NOT NULL
    op.execute("DELETE FROM content_chunks WHERE job_id IS NULL")
    op.alter_column(
        "content_chunks", "job_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_index(
        op.f("ix_content_chunks_id"), "content_chunks", ["id"], unique=False
    )
    # Clean up orphaned data_quality_metrics before making job_id NOT NULL
    op.execute("DELETE FROM data_quality_metrics WHERE job_id IS NULL")
    op.alter_column(
        "data_quality_metrics", "job_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.drop_constraint(
        op.f("data_quality_metrics_job_id_key"), "data_quality_metrics", type_="unique"
    )
    op.create_index(
        op.f("ix_data_quality_metrics_id"), "data_quality_metrics", ["id"], unique=False
    )
    op.add_column("job_comparisons", sa.Column("job1_id", sa.Integer(), nullable=False))
    op.add_column("job_comparisons", sa.Column("job2_id", sa.Integer(), nullable=False))
    op.add_column(
        "job_comparisons",
        sa.Column("similarity_score", sa.DECIMAL(precision=4, scale=3), nullable=True),
    )
    op.add_column(
        "job_comparisons",
        sa.Column(
            "differences", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
    )
    op.alter_column(
        "job_comparisons",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("uq_job_comparison"), "job_comparisons", type_="unique")
    op.create_index(
        op.f("ix_job_comparisons_id"), "job_comparisons", ["id"], unique=False
    )
    op.drop_constraint(
        op.f("job_comparisons_job_b_id_fkey"), "job_comparisons", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("job_comparisons_job_a_id_fkey"), "job_comparisons", type_="foreignkey"
    )
    op.create_foreign_key(
        None, "job_comparisons", "job_descriptions", ["job2_id"], ["id"]
    )
    op.create_foreign_key(
        None, "job_comparisons", "job_descriptions", ["job1_id"], ["id"]
    )
    op.drop_column("job_comparisons", "section_scores")
    op.drop_column("job_comparisons", "job_b_id")
    op.drop_column("job_comparisons", "job_a_id")
    op.drop_column("job_comparisons", "overall_score")
    op.drop_column("job_comparisons", "metadata_comparison")
    op.drop_column("job_comparisons", "updated_at")
    op.drop_column("job_comparisons", "skills_analysis")
    op.alter_column(
        "job_descriptions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.drop_constraint(
        op.f("job_descriptions_job_number_key"), "job_descriptions", type_="unique"
    )
    op.create_index(
        op.f("ix_job_descriptions_id"), "job_descriptions", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_job_descriptions_job_number"),
        "job_descriptions",
        ["job_number"],
        unique=True,
    )
    # Clean up orphaned job_metadata before making job_id NOT NULL
    op.execute("DELETE FROM job_metadata WHERE job_id IS NULL")
    op.alter_column(
        "job_metadata", "job_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_index(op.f("ix_job_metadata_id"), "job_metadata", ["id"], unique=False)
    # Clean up orphaned job_sections before making job_id NOT NULL
    op.execute("DELETE FROM job_sections WHERE job_id IS NULL")
    op.alter_column(
        "job_sections", "job_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_index(op.f("ix_job_sections_id"), "job_sections", ["id"], unique=False)
    op.add_column(
        "job_skills",
        sa.Column("proficiency_level", sa.String(length=50), nullable=True),
    )
    op.add_column(
        "job_skills",
        sa.Column("is_required", sa.Boolean(), nullable=False, server_default="false"),
    )
    op.add_column(
        "job_skills", sa.Column("extracted_context", sa.Text(), nullable=True)
    )
    # Clean up orphaned job_skills before making job_id NOT NULL
    op.execute("DELETE FROM job_skills WHERE job_id IS NULL")
    op.alter_column("job_skills", "job_id", existing_type=sa.INTEGER(), nullable=False)
    op.alter_column(
        "job_skills", "skill_name", existing_type=sa.VARCHAR(length=200), nullable=False
    )
    op.create_index(op.f("ix_job_skills_id"), "job_skills", ["id"], unique=False)
    op.drop_column("job_skills", "created_at")
    op.drop_column("job_skills", "extracted_from_section")
    op.drop_column("job_skills", "skill_level")
    op.create_index(op.f("ix_rlhf_feedback_id"), "rlhf_feedback", ["id"], unique=False)
    op.alter_column(
        "saved_searches",
        "search_type",
        existing_type=sa.VARCHAR(length=50),
        nullable=False,
    )
    op.alter_column(
        "saved_searches",
        "is_public",
        existing_type=sa.VARCHAR(length=10),
        nullable=False,
    )
    op.alter_column(
        "saved_searches",
        "is_favorite",
        existing_type=sa.VARCHAR(length=10),
        nullable=False,
    )
    op.alter_column(
        "saved_searches",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "saved_searches", "use_count", existing_type=sa.INTEGER(), nullable=False
    )
    op.create_index(
        op.f("ix_saved_searches_id"), "saved_searches", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_search_analytics_id"), "search_analytics", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_system_metrics_id"), "system_metrics", ["id"], unique=False
    )
    op.create_index(
        op.f("ix_usage_analytics_id"), "usage_analytics", ["id"], unique=False
    )
    op.alter_column(
        "user_permissions", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "user_permissions",
        "granted_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(
        op.f("user_permissions_user_id_resource_type_resource_id_permissi_key"),
        "user_permissions",
        type_="unique",
    )
    op.create_index(
        op.f("ix_user_permissions_id"), "user_permissions", ["id"], unique=False
    )
    op.drop_constraint(
        op.f("user_permissions_user_id_fkey"), "user_permissions", type_="foreignkey"
    )
    op.drop_constraint(
        op.f("user_permissions_granted_by_fkey"), "user_permissions", type_="foreignkey"
    )
    op.create_foreign_key(None, "user_permissions", "users", ["user_id"], ["id"])
    op.alter_column(
        "user_preferences",
        "preference_type",
        existing_type=sa.VARCHAR(length=50),
        nullable=False,
    )
    op.alter_column(
        "user_preferences",
        "preference_key",
        existing_type=sa.VARCHAR(length=100),
        nullable=False,
    )
    op.alter_column(
        "user_preferences",
        "preference_value",
        existing_type=postgresql.JSONB(astext_type=sa.Text()),
        type_=sa.JSON(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_preferences",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_constraint(op.f("uq_user_preference"), "user_preferences", type_="unique")
    op.create_index(
        op.f("ix_user_preferences_id"), "user_preferences", ["id"], unique=False
    )
    op.alter_column(
        "user_sessions", "user_id", existing_type=sa.INTEGER(), nullable=False
    )
    op.alter_column(
        "user_sessions",
        "ip_address",
        existing_type=postgresql.INET(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_sessions",
        "user_agent",
        existing_type=sa.TEXT(),
        type_=sa.String(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_sessions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("idx_user_sessions_token"), table_name="user_sessions")
    op.drop_index(op.f("idx_user_sessions_user_id"), table_name="user_sessions")
    op.drop_constraint(
        op.f("user_sessions_session_token_key"), "user_sessions", type_="unique"
    )
    op.create_index(op.f("ix_user_sessions_id"), "user_sessions", ["id"], unique=False)
    op.create_index(
        op.f("ix_user_sessions_session_token"),
        "user_sessions",
        ["session_token"],
        unique=True,
    )
    op.drop_constraint(
        op.f("user_sessions_user_id_fkey"), "user_sessions", type_="foreignkey"
    )
    op.create_foreign_key(None, "user_sessions", "users", ["user_id"], ["id"])
    op.alter_column(
        "users",
        "role",
        existing_type=sa.VARCHAR(length=50),
        nullable=False,
        existing_server_default=sa.text("'user'::character varying"),
    )
    op.alter_column(
        "users",
        "preferred_language",
        existing_type=sa.VARCHAR(length=5),
        nullable=False,
        existing_server_default=sa.text("'en'::character varying"),
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        nullable=False,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=False,
        existing_server_default=sa.text("now()"),
    )
    op.drop_index(op.f("idx_users_email"), table_name="users")
    op.drop_index(op.f("idx_users_username"), table_name="users")
    op.drop_constraint(op.f("users_email_key"), "users", type_="unique")
    op.drop_constraint(op.f("users_username_key"), "users", type_="unique")
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.create_unique_constraint(
        op.f("users_username_key"),
        "users",
        ["username"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_unique_constraint(
        op.f("users_email_key"), "users", ["email"], postgresql_nulls_not_distinct=False
    )
    op.create_index(op.f("idx_users_username"), "users", ["username"], unique=False)
    op.create_index(op.f("idx_users_email"), "users", ["email"], unique=False)
    op.alter_column(
        "users",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "users",
        "is_active",
        existing_type=sa.BOOLEAN(),
        nullable=True,
        existing_server_default=sa.text("true"),
    )
    op.alter_column(
        "users",
        "preferred_language",
        existing_type=sa.VARCHAR(length=5),
        nullable=True,
        existing_server_default=sa.text("'en'::character varying"),
    )
    op.alter_column(
        "users",
        "role",
        existing_type=sa.VARCHAR(length=50),
        nullable=True,
        existing_server_default=sa.text("'user'::character varying"),
    )
    op.drop_constraint(None, "user_sessions", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_sessions_user_id_fkey"),
        "user_sessions",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_user_sessions_session_token"), table_name="user_sessions")
    op.drop_index(op.f("ix_user_sessions_id"), table_name="user_sessions")
    op.create_unique_constraint(
        op.f("user_sessions_session_token_key"),
        "user_sessions",
        ["session_token"],
        postgresql_nulls_not_distinct=False,
    )
    op.create_index(
        op.f("idx_user_sessions_user_id"), "user_sessions", ["user_id"], unique=False
    )
    op.create_index(
        op.f("idx_user_sessions_token"),
        "user_sessions",
        ["session_token"],
        unique=False,
    )
    op.alter_column(
        "user_sessions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "user_sessions",
        "user_agent",
        existing_type=sa.String(),
        type_=sa.TEXT(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_sessions",
        "ip_address",
        existing_type=sa.String(),
        type_=postgresql.INET(),
        existing_nullable=True,
    )
    op.alter_column(
        "user_sessions", "user_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_index(op.f("ix_user_preferences_id"), table_name="user_preferences")
    op.create_unique_constraint(
        op.f("uq_user_preference"),
        "user_preferences",
        ["user_id", "session_id", "preference_type", "preference_key"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "user_preferences",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "user_preferences",
        "preference_value",
        existing_type=sa.JSON(),
        type_=postgresql.JSONB(astext_type=sa.Text()),
        existing_nullable=True,
    )
    op.alter_column(
        "user_preferences",
        "preference_key",
        existing_type=sa.VARCHAR(length=100),
        nullable=True,
    )
    op.alter_column(
        "user_preferences",
        "preference_type",
        existing_type=sa.VARCHAR(length=50),
        nullable=True,
    )
    op.drop_constraint(None, "user_permissions", type_="foreignkey")
    op.create_foreign_key(
        op.f("user_permissions_granted_by_fkey"),
        "user_permissions",
        "users",
        ["granted_by"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("user_permissions_user_id_fkey"),
        "user_permissions",
        "users",
        ["user_id"],
        ["id"],
        ondelete="CASCADE",
    )
    op.drop_index(op.f("ix_user_permissions_id"), table_name="user_permissions")
    op.create_unique_constraint(
        op.f("user_permissions_user_id_resource_type_resource_id_permissi_key"),
        "user_permissions",
        ["user_id", "resource_type", "resource_id", "permission_type"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "user_permissions",
        "granted_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "user_permissions", "user_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_index(op.f("ix_usage_analytics_id"), table_name="usage_analytics")
    op.drop_index(op.f("ix_system_metrics_id"), table_name="system_metrics")
    op.drop_index(op.f("ix_search_analytics_id"), table_name="search_analytics")
    op.drop_index(op.f("ix_saved_searches_id"), table_name="saved_searches")
    op.alter_column(
        "saved_searches", "use_count", existing_type=sa.INTEGER(), nullable=True
    )
    op.alter_column(
        "saved_searches",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.alter_column(
        "saved_searches",
        "is_favorite",
        existing_type=sa.VARCHAR(length=10),
        nullable=True,
    )
    op.alter_column(
        "saved_searches",
        "is_public",
        existing_type=sa.VARCHAR(length=10),
        nullable=True,
    )
    op.alter_column(
        "saved_searches",
        "search_type",
        existing_type=sa.VARCHAR(length=50),
        nullable=True,
    )
    op.drop_index(op.f("ix_rlhf_feedback_id"), table_name="rlhf_feedback")
    op.add_column(
        "job_skills",
        sa.Column(
            "skill_level", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
    )
    op.add_column(
        "job_skills",
        sa.Column(
            "extracted_from_section",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "job_skills",
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_index(op.f("ix_job_skills_id"), table_name="job_skills")
    op.alter_column(
        "job_skills", "skill_name", existing_type=sa.VARCHAR(length=200), nullable=True
    )
    op.alter_column("job_skills", "job_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_column("job_skills", "extracted_context")
    op.drop_column("job_skills", "is_required")
    op.drop_column("job_skills", "proficiency_level")
    op.drop_index(op.f("ix_job_sections_id"), table_name="job_sections")
    op.alter_column("job_sections", "job_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_index(op.f("ix_job_metadata_id"), table_name="job_metadata")
    op.alter_column("job_metadata", "job_id", existing_type=sa.INTEGER(), nullable=True)
    op.drop_index(op.f("ix_job_descriptions_job_number"), table_name="job_descriptions")
    op.drop_index(op.f("ix_job_descriptions_id"), table_name="job_descriptions")
    op.create_unique_constraint(
        op.f("job_descriptions_job_number_key"),
        "job_descriptions",
        ["job_number"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "job_descriptions",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("CURRENT_TIMESTAMP"),
    )
    op.add_column(
        "job_comparisons",
        sa.Column(
            "skills_analysis",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "job_comparisons",
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "job_comparisons",
        sa.Column(
            "metadata_comparison",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "job_comparisons",
        sa.Column(
            "overall_score",
            sa.NUMERIC(precision=4, scale=3),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.add_column(
        "job_comparisons",
        sa.Column("job_a_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "job_comparisons",
        sa.Column("job_b_id", sa.INTEGER(), autoincrement=False, nullable=True),
    )
    op.add_column(
        "job_comparisons",
        sa.Column(
            "section_scores",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
    )
    op.drop_constraint(None, "job_comparisons", type_="foreignkey")
    op.drop_constraint(None, "job_comparisons", type_="foreignkey")
    op.create_foreign_key(
        op.f("job_comparisons_job_a_id_fkey"),
        "job_comparisons",
        "job_descriptions",
        ["job_a_id"],
        ["id"],
    )
    op.create_foreign_key(
        op.f("job_comparisons_job_b_id_fkey"),
        "job_comparisons",
        "job_descriptions",
        ["job_b_id"],
        ["id"],
    )
    op.drop_index(op.f("ix_job_comparisons_id"), table_name="job_comparisons")
    op.create_unique_constraint(
        op.f("uq_job_comparison"),
        "job_comparisons",
        ["job_a_id", "job_b_id", "comparison_type"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "job_comparisons",
        "created_at",
        existing_type=postgresql.TIMESTAMP(),
        nullable=True,
        existing_server_default=sa.text("now()"),
    )
    op.drop_column("job_comparisons", "differences")
    op.drop_column("job_comparisons", "similarity_score")
    op.drop_column("job_comparisons", "job2_id")
    op.drop_column("job_comparisons", "job1_id")
    op.drop_index(op.f("ix_data_quality_metrics_id"), table_name="data_quality_metrics")
    op.create_unique_constraint(
        op.f("data_quality_metrics_job_id_key"),
        "data_quality_metrics",
        ["job_id"],
        postgresql_nulls_not_distinct=False,
    )
    op.alter_column(
        "data_quality_metrics", "job_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_index(op.f("ix_content_chunks_id"), table_name="content_chunks")
    op.alter_column(
        "content_chunks", "job_id", existing_type=sa.INTEGER(), nullable=True
    )
    op.drop_index(op.f("ix_ai_usage_tracking_id"), table_name="ai_usage_tracking")
    op.create_table(
        "classification_benchmarks",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "classification", sa.VARCHAR(length=10), autoincrement=False, nullable=True
        ),
        sa.Column(
            "department", sa.VARCHAR(length=200), autoincrement=False, nullable=True
        ),
        sa.Column("avg_salary", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column("median_salary", sa.NUMERIC(), autoincrement=False, nullable=True),
        sa.Column(
            "avg_fte_supervised", sa.INTEGER(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "common_skills",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "typical_reports_to",
            sa.VARCHAR(length=500),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("job_count", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "last_updated",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("classification_benchmarks_pkey")),
        sa.UniqueConstraint(
            "classification",
            "department",
            name=op.f("uq_classification_benchmark"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "editing_sessions",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('editing_sessions_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column(
            "session_id", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column("job_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "session_type",
            sa.VARCHAR(length=20),
            server_default=sa.text("'editing'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'active'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "metadata",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "expires_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["users.id"], name="editing_sessions_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["job_descriptions.id"],
            name="editing_sessions_job_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="editing_sessions_pkey"),
        sa.UniqueConstraint(
            "session_id",
            name="editing_sessions_session_id_key",
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        op.f("idx_editing_sessions_job_id"),
        "editing_sessions",
        ["job_id"],
        unique=False,
    )
    op.create_index(
        op.f("idx_editing_sessions_created_by"),
        "editing_sessions",
        ["created_by"],
        unique=False,
    )
    op.create_table(
        "websocket_connections",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "connection_id", sa.VARCHAR(length=128), autoincrement=False, nullable=False
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("session_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("ip_address", postgresql.INET(), autoincrement=False, nullable=True),
        sa.Column(
            "connected_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "last_ping",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'active'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["editing_sessions.id"],
            name=op.f("websocket_connections_session_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("websocket_connections_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("websocket_connections_pkey")),
        sa.UniqueConstraint(
            "connection_id",
            name=op.f("websocket_connections_connection_id_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_index(
        op.f("idx_websocket_connections_user_id"),
        "websocket_connections",
        ["user_id"],
        unique=False,
    )
    op.create_table(
        "career_paths",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("from_job_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("to_job_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "progression_type",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "feasibility_score",
            sa.NUMERIC(precision=4, scale=3),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "skill_gap_analysis",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "required_experience_years",
            sa.INTEGER(),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["from_job_id"],
            ["job_descriptions.id"],
            name=op.f("career_paths_from_job_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["to_job_id"],
            ["job_descriptions.id"],
            name=op.f("career_paths_to_job_id_fkey"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("career_paths_pkey")),
        sa.UniqueConstraint(
            "from_job_id",
            "to_job_id",
            name=op.f("uq_career_path"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "user_analytics",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("session_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "event_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "event_data",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "page_url", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("ip_address", postgresql.INET(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["user_sessions.id"],
            name=op.f("user_analytics_session_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("user_analytics_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("user_analytics_pkey")),
    )
    op.create_index(
        op.f("idx_user_analytics_user_id"), "user_analytics", ["user_id"], unique=False
    )
    op.create_table(
        "translation_memory",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('translation_memory_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("project_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("source_text", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("target_text", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column(
            "source_language", sa.VARCHAR(length=5), autoincrement=False, nullable=False
        ),
        sa.Column(
            "target_language", sa.VARCHAR(length=5), autoincrement=False, nullable=False
        ),
        sa.Column(
            "context_info",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "quality_score",
            sa.NUMERIC(precision=3, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["users.id"], name="translation_memory_created_by_fkey"
        ),
        sa.ForeignKeyConstraint(
            ["project_id"],
            ["translation_projects.id"],
            name="translation_memory_project_id_fkey",
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name="translation_memory_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index(
        op.f("idx_translation_memory_project_id"),
        "translation_memory",
        ["project_id"],
        unique=False,
    )
    op.create_table(
        "ai_content_enhancements",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("job_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "enhancement_type",
            sa.VARCHAR(length=50),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("original_content", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("enhanced_content", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("ai_provider_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "confidence_score",
            sa.NUMERIC(precision=3, scale=2),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "review_status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'pending'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "reviewed_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column("reviewed_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.ForeignKeyConstraint(
            ["ai_provider_id"],
            ["ai_providers.id"],
            name=op.f("ai_content_enhancements_ai_provider_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["job_descriptions.id"],
            name=op.f("ai_content_enhancements_job_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["reviewed_by"],
            ["users.id"],
            name=op.f("ai_content_enhancements_reviewed_by_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("ai_content_enhancements_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("ai_content_enhancements_pkey")),
    )
    op.create_index(
        op.f("idx_ai_content_enhancements_job_id"),
        "ai_content_enhancements",
        ["job_id"],
        unique=False,
    )
    op.create_table(
        "editing_participants",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("session_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "role",
            sa.VARCHAR(length=20),
            server_default=sa.text("'editor'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "joined_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "last_activity",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cursor_position",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["editing_sessions.id"],
            name=op.f("editing_participants_session_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
            name=op.f("editing_participants_user_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("editing_participants_pkey")),
        sa.UniqueConstraint(
            "session_id",
            "user_id",
            name=op.f("editing_participants_session_id_user_id_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "document_changes",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("session_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "change_type", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column("content_before", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("content_after", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column("position_start", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("position_end", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "operation_data",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "applied_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "operation_id", sa.VARCHAR(length=128), autoincrement=False, nullable=True
        ),
        sa.Column(
            "parent_operation_id",
            sa.VARCHAR(length=128),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["session_id"],
            ["editing_sessions.id"],
            name=op.f("document_changes_session_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("document_changes_user_id_fkey")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("document_changes_pkey")),
    )
    op.create_index(
        op.f("idx_document_changes_user_id"),
        "document_changes",
        ["user_id"],
        unique=False,
    )
    op.create_index(
        op.f("idx_document_changes_session_id"),
        "document_changes",
        ["session_id"],
        unique=False,
    )
    op.create_table(
        "ai_providers",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("name", sa.VARCHAR(length=50), autoincrement=False, nullable=False),
        sa.Column(
            "api_endpoint", sa.VARCHAR(length=500), autoincrement=False, nullable=True
        ),
        sa.Column(
            "model_name", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "capabilities",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "rate_limits",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "cost_per_token",
            sa.NUMERIC(precision=10, scale=8),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "is_active",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("ai_providers_pkey")),
        sa.UniqueConstraint(
            "name",
            name=op.f("ai_providers_name_key"),
            postgresql_include=[],
            postgresql_nulls_not_distinct=False,
        ),
    )
    op.create_table(
        "translation_projects",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('translation_projects_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(length=200), autoincrement=False, nullable=False),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "source_language", sa.VARCHAR(length=5), autoincrement=False, nullable=False
        ),
        sa.Column(
            "target_language", sa.VARCHAR(length=5), autoincrement=False, nullable=False
        ),
        sa.Column(
            "status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'active'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["users.id"], name="translation_projects_created_by_fkey"
        ),
        sa.PrimaryKeyConstraint("id", name="translation_projects_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_table(
        "audit_log",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column(
            "event_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "severity", sa.VARCHAR(length=20), autoincrement=False, nullable=False
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "username", sa.VARCHAR(length=100), autoincrement=False, nullable=True
        ),
        sa.Column(
            "timestamp",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "resource_type", sa.VARCHAR(length=50), autoincrement=False, nullable=True
        ),
        sa.Column("resource_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "action", sa.VARCHAR(length=100), autoincrement=False, nullable=False
        ),
        sa.Column("description", sa.TEXT(), autoincrement=False, nullable=False),
        sa.Column("ip_address", postgresql.INET(), autoincrement=False, nullable=True),
        sa.Column("user_agent", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "session_id", sa.VARCHAR(length=128), autoincrement=False, nullable=True
        ),
        sa.Column(
            "details",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "before_state",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "after_state",
            postgresql.JSONB(astext_type=sa.Text()),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "success",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("error_message", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "event_hash", sa.VARCHAR(length=64), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("audit_log_pkey")),
    )
    op.create_index(
        op.f("idx_audit_log_user_id"), "audit_log", ["user_id"], unique=False
    )
    op.create_index(
        op.f("idx_audit_log_timestamp"), "audit_log", ["timestamp"], unique=False
    )
    op.create_index(
        op.f("idx_audit_log_success"), "audit_log", ["success"], unique=False
    )
    op.create_index(
        op.f("idx_audit_log_severity"), "audit_log", ["severity"], unique=False
    )
    op.create_index(
        op.f("idx_audit_log_session_id"), "audit_log", ["session_id"], unique=False
    )
    op.create_index(
        op.f("idx_audit_log_resource"),
        "audit_log",
        ["resource_type", "resource_id"],
        unique=False,
    )
    op.create_index(
        op.f("idx_audit_log_failures"),
        "audit_log",
        ["timestamp", "event_type", "user_id"],
        unique=False,
        postgresql_where="(success = false)",
    )
    op.create_index(
        op.f("idx_audit_log_event_type"), "audit_log", ["event_type"], unique=False
    )
    op.create_table(
        "translation_embeddings",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("memory_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "embedding",
            pgvector.sqlalchemy.vector.VECTOR(dim=1536),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "text_hash", sa.VARCHAR(length=64), autoincrement=False, nullable=False
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["memory_id"],
            ["translation_memory.id"],
            name=op.f("translation_embeddings_memory_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("translation_embeddings_pkey")),
    )
    op.create_index(
        op.f("idx_translation_embeddings_vector_cosine"),
        "translation_embeddings",
        ["embedding"],
        unique=False,
        postgresql_ops={"embedding": "vector_cosine_ops"},
        postgresql_with={"m": "16", "ef_construction": "64"},
        postgresql_using="hnsw",
    )
    op.create_index(
        op.f("idx_translation_embeddings_memory_id"),
        "translation_embeddings",
        ["memory_id"],
        unique=False,
    )
    op.create_table(
        "content_approvals",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("workflow_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("approver_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "approval_stage", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column("status", sa.VARCHAR(length=20), autoincrement=False, nullable=False),
        sa.Column("comments", sa.TEXT(), autoincrement=False, nullable=True),
        sa.Column(
            "approved_at", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["approver_id"],
            ["users.id"],
            name=op.f("content_approvals_approver_id_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["workflow_id"],
            ["content_workflows.id"],
            name=op.f("content_approvals_workflow_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("content_approvals_pkey")),
    )
    op.create_table(
        "content_workflows",
        sa.Column("id", sa.INTEGER(), autoincrement=True, nullable=False),
        sa.Column("job_id", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "workflow_type", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "current_stage", sa.VARCHAR(length=50), autoincrement=False, nullable=False
        ),
        sa.Column(
            "status",
            sa.VARCHAR(length=20),
            server_default=sa.text("'active'::character varying"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column("created_by", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column("assigned_to", sa.INTEGER(), autoincrement=False, nullable=True),
        sa.Column(
            "due_date", postgresql.TIMESTAMP(), autoincrement=False, nullable=True
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=True,
        ),
        sa.ForeignKeyConstraint(
            ["assigned_to"],
            ["users.id"],
            name=op.f("content_workflows_assigned_to_fkey"),
        ),
        sa.ForeignKeyConstraint(
            ["created_by"], ["users.id"], name=op.f("content_workflows_created_by_fkey")
        ),
        sa.ForeignKeyConstraint(
            ["job_id"],
            ["job_descriptions.id"],
            name=op.f("content_workflows_job_id_fkey"),
            ondelete="CASCADE",
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("content_workflows_pkey")),
    )
    op.create_index(
        op.f("idx_content_workflows_job_id"),
        "content_workflows",
        ["job_id"],
        unique=False,
    )
    op.drop_index(
        op.f("ix_job_description_skills_skill_id"), table_name="job_description_skills"
    )
    op.drop_index(
        op.f("ix_job_description_skills_job_id"), table_name="job_description_skills"
    )
    op.drop_index(
        op.f("ix_job_description_skills_id"), table_name="job_description_skills"
    )
    op.drop_table("job_description_skills")
    op.drop_index(op.f("ix_skills_skill_type"), table_name="skills")
    op.drop_index(op.f("ix_skills_name"), table_name="skills")
    op.drop_index(op.f("ix_skills_lightcast_id"), table_name="skills")
    op.drop_index(op.f("ix_skills_id"), table_name="skills")
    op.drop_table("skills")
    # ### end Alembic commands ###
