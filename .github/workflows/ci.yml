name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  NODE_VERSION: "20"
  POETRY_VERSION: "2.2.0"

# Skip pipeline for documentation-only changes
# This significantly reduces unnecessary pipeline runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Quick checks that can fail fast
  changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docs: ${{ steps.changes.outputs.docs }}
      security: ${{ steps.changes.outputs.security }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
              - '.github/workflows/**'
              - 'pyproject.toml'
              - 'poetry.lock'
            frontend:
              - 'src/**'
              - 'public/**'
              - 'package.json'
              - 'bun.lockb'
              - '.github/workflows/**'
            docs:
              - '**/*.md'
              - 'docs/**'
            security:
              - 'backend/**'
              - 'src/**'
              - '.github/workflows/**'
              - 'scripts/security_audit_phase2.py'
              - 'scripts/generate_security_report.py'
              - 'scripts/check_security_thresholds.py'

  # Security and dependency scanning - now runs in parallel with tests
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.security == 'true'
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Set up Python for security tools
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry for dependency scanning
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies for security scanning
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-security-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-security-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            venv-security-${{ runner.os }}-

      - name: Install backend dependencies for security scanning
        working-directory: ./backend
        run: |
          poetry install --no-interaction --no-root
          poetry install --no-interaction

      - name: Run safety check for Python dependencies
        working-directory: ./backend
        run: |
          poetry run pip install safety
          poetry run safety check --json --output safety-report.json || true

      - name: Run bandit security linter for Python code
        working-directory: ./backend
        run: |
          poetry run pip install bandit[toml]
          poetry run bandit -r src/ -f json -o bandit-report.json || true

      - name: Run semgrep for advanced security analysis
        run: |
          pip install semgrep
          semgrep --config=auto --json --output=semgrep-results.json . || true

      - name: Setup Bun for frontend security scanning
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install frontend dependencies for security scanning
        run: bun install

      - name: Run npm audit for frontend dependencies
        run: |
          # Convert bun lockfile for npm audit
          npm audit --audit-level=moderate --json > npm-audit-results.json || true

      - name: Run ESLint security plugin
        run: |
          bun add --dev eslint-plugin-security
          npx eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-security-results.json || true

      - name: Scan for secrets with GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      - name: Phase 2 specific security checks
        working-directory: ./backend
        run: |
          # Check for sensitive data in Phase 2 features
          poetry run python scripts/security_audit_phase2.py --output security-audit-phase2.json

      - name: Generate security report
        run: |
          python scripts/generate_security_report.py \
            --trivy trivy-results.sarif \
            --safety backend/safety-report.json \
            --bandit backend/bandit-report.json \
            --semgrep semgrep-results.json \
            --npm-audit npm-audit-results.json \
            --eslint eslint-security-results.json \
            --phase2-audit backend/security-audit-phase2.json \
            --output security-summary.json

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results-${{ github.sha }}
          path: |
            trivy-results.sarif
            backend/safety-report.json
            backend/bandit-report.json
            semgrep-results.json
            npm-audit-results.json
            eslint-security-results.json
            backend/security-audit-phase2.json
            security-summary.json
          retention-days: 30

      - name: Check security thresholds
        run: |
          python scripts/check_security_thresholds.py \
            --security-summary security-summary.json \
            --fail-on-high true

  # Backend testing and validation
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true'
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false  # Continue other Python versions if one fails

    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ matrix.python-version }}-
            venv-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        working-directory: ./backend
        run: poetry install --no-interaction --no-root

      - name: Install project
        working-directory: ./backend
        run: poetry install --no-interaction

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up test environment
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/test_data
          ENVIRONMENT: testing
        run: |
          mkdir -p /tmp/test_data
          poetry run alembic upgrade head

      - name: Run linting
        working-directory: ./backend
        run: |
          poetry run ruff check .
          poetry run ruff format --check .

      - name: Run type checking
        working-directory: ./backend
        run: poetry run mypy src/

      - name: Run tests with coverage
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/test_data
          ENVIRONMENT: testing
        run: |
          poetry run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=75

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Frontend testing and validation
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-

      - name: Install dependencies
        run: bun install

      - name: Type checking
        run: |
          # Check if type-check script exists
          if bun run --silent type-check 2>/dev/null; then
            echo "Running type checking..."
            bun run type-check
          else
            echo "Type checking script not found, running tsc directly..."
            bunx tsc --noEmit
          fi

      - name: Linting
        run: |
          # Check if lint script exists
          if bun run --silent lint 2>/dev/null; then
            echo "Running linting..."
            bun run lint
          else
            echo "Linting script not found, skipping..."
          fi

      - name: Build application
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api
        run: bun run build

      - name: Run tests (when available)
        run: |
          # Add test command when frontend tests are implemented
          echo "Frontend tests will be added in future iterations"

  # Integration testing
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test]
    if: always() && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') && !cancelled()

    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install backend dependencies
        working-directory: ./backend
        run: poetry install --no-interaction

      - name: Install frontend dependencies
        run: bun install

      - name: Wait for services
        run: |
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up test database
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/test_data
          ENVIRONMENT: testing
        run: |
          mkdir -p /tmp/test_data
          poetry run alembic upgrade head

      - name: Start backend server
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/test_data
          ENVIRONMENT: testing
        run: |
          poetry run uvicorn src.jd_ingestion.main:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Build and start frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api
        run: |
          bun run build
          bun run start &
          sleep 10

      - name: Run integration tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/test_data
          ENVIRONMENT: testing
          FRONTEND_URL: http://localhost:3000
          BACKEND_URL: http://localhost:8000
        run: |
          poetry run pytest tests/integration/ -v --tb=short

  # Performance testing
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [changes, backend-test, frontend-test]
    if: always() && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true') && !cancelled() && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main')

    services:
      postgres:
        image: pgvector/pgvector:pg17
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install backend dependencies
        working-directory: ./backend
        run: poetry install --no-interaction

      - name: Install frontend dependencies
        run: bun install

      - name: Wait for services
        run: |
          until pg_isready -h localhost -p 5432 -U testuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Set up test database with performance data
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/perf_data
          ENVIRONMENT: testing
        run: |
          mkdir -p /tmp/perf_data
          poetry run alembic upgrade head
          # Seed performance test data
          poetry run python scripts/seed_performance_data.py

      - name: Start backend server for performance testing
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/perf_data
          ENVIRONMENT: testing
        run: |
          poetry run uvicorn src.jd_ingestion.main:app --host 0.0.0.0 --port 8000 &
          sleep 15

      - name: Run backend performance tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql+asyncpg://testuser:testpassword@localhost:5432/testdb
          DATABASE_SYNC_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          REDIS_URL: redis://localhost:6379/0
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          DATA_DIRECTORY: /tmp/perf_data
          ENVIRONMENT: testing
          BACKEND_URL: http://localhost:8000
        run: |
          poetry run pytest tests/performance/ -v --tb=short --benchmark-json=backend-performance.json

      - name: Install K6 for load testing
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6

      - name: Run API load tests
        run: |
          k6 run --out json=load-test-results.json tests/performance/load-tests/api-load-test.js

      - name: Build frontend for performance testing
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000/api
        run: |
          bun run build
          bun run start &
          sleep 10

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.0

      - name: Run Lighthouse performance audit
        run: |
          lhci autorun --config=.lighthouserc.json --upload.target=temporary-public-storage

      - name: Archive performance test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-test-results-${{ github.sha }}
          path: |
            backend/backend-performance.json
            load-test-results.json
            .lighthouseci/
          retention-days: 30

      - name: Performance regression check
        working-directory: ./backend
        run: |
          poetry run python scripts/check_performance_regression.py \
            --current-results backend-performance.json \
            --baseline-branch main \
            --threshold 10

  # Build and release preparation
  build:
    name: Build and Release Preparation
    runs-on: ubuntu-latest
    needs: [changes, security, integration-test, performance-test]
    if: always() && !cancelled() && github.ref == 'refs/heads/main' && (needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: backend/.venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            venv-${{ runner.os }}-

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: bun-${{ runner.os }}-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            bun-${{ runner.os }}-

      - name: Build backend distribution
        working-directory: ./backend
        run: |
          poetry install --no-interaction
          poetry build

      - name: Build frontend for production
        env:
          NEXT_PUBLIC_API_URL: https://api.jddb.example.com/api
        run: |
          bun install
          bun run build

      - name: Create deployment artifacts
        run: |
          mkdir -p dist/
          cp -r backend/dist/ dist/backend/
          cp -r .next/ dist/frontend/
          cp -r public/ dist/frontend/public/
          tar -czf jddb-release-${{ github.sha }}.tar.gz dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jddb-release-${{ github.sha }}
          path: jddb-release-${{ github.sha }}.tar.gz
          retention-days: 30

  # Deployment (placeholder for future implementation)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: jddb-release-${{ github.sha }}

      - name: Deploy to staging
        run: |
          echo "Deployment step will be implemented based on target infrastructure"
          echo "Artifact: jddb-release-${{ github.sha }}.tar.gz"
          # Add deployment commands for your target environment here
