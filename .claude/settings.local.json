{
  "permissions": {
    "allow": [
      "Bash(done)",
      "Bash(poetry run alembic:*)",
      "Bash(poetry run python:*)",
      "Bash(poetry run mypy:*)",
      "Bash(poetry add:*)",
      "Bash(find:*)",
      "Bash(git add:*)",
      "Bash(pre-commit run:*)",
      "Bash(python -m mypy:*)",
      "Bash(git commit:*)",
      "Bash(git reset:*)",
      "Bash(git push:*)",
      "Bash(poetry run pytest:*)",
      "Bash(poetry show:*)",
      "Bash(git checkout:*)",
      "Bash(dir:*)",
      "Bash(grep:*)",
      "Bash(poetry run:*)",
      "Bash(bun:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_close",
      "Bash(curl -X POST \"http://localhost:8000/api/translation-memory/search\" -H \"Content-Type: application/json\" -d '{\"\"source_text\"\": \"\"strategic planning\"\", \"\"source_language\"\": \"\"en\"\", \"\"target_language\"\": \"\"fr\"\", \"\"min_similarity\"\": 0.7, \"\"limit\"\": 5}')",
      "Bash(curl -X POST \"http://localhost:8000/api/translation-memory/search?query_text=strategic+planning&source_language=en&target_language=fr&similarity_threshold=0.7&limit=5\")",
      "Bash(curl -X GET \"http://localhost:8000/api/templates/classifications\")",
      "Bash(curl -X GET \"http://localhost:8000/api/templates/generate/EC?language=en&level=01\")",
      "Bash(curl -X GET \"http://localhost:8000/api/templates/bilingual/PM?level=02\")",
      "Bash(python:*)",
      "Bash(curl:*)",
      "Bash(timeout 20 poetry run pytest tests/unit/test_connection.py -v --tb=short -p no:xdist)",
      "Bash(timeout:*)",
      "Bash(awk:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_evaluate",
      "WebFetch(domain:wet-boew.github.io)",
      "WebFetch(domain:github.com)",
      "WebSearch",
      "Bash(del nul)",
      "Bash(git restore:*)",
      "Bash(git mv:*)",
      "Bash(tee:*)",
      "Bash(make:*)",
      "Bash(poetry install:*)",
      "WebFetch(domain:www.moshjd.com)",
      "WebFetch(domain:www.hrsg.ca)",
      "WebFetch(domain:hrizons.com)",
      "WebFetch(domain:jdxpert.com)",
      "Bash(cmd /c taskkill:*)",
      "Bash(cmd /c:*)",
      "Bash(move:*)",
      "Bash(test:*)",
      "WebFetch(domain:docs.lightcast.dev)",
      "Bash(del .secrets.new)",
      "mcp__playwright__browser_press_key",
      "Bash(rm:*)",
      "Bash(PORT=3004 bun dev)",
      "Bash(if [ -d \"node_modules\" ])",
      "Bash(then echo \"Node modules installed\")",
      "Bash(else echo \"Node modules NOT installed\")",
      "Bash(fi)",
      "Bash(poetry check:*)",
      "Bash(poetry --version)",
      "Bash(tasklist)",
      "Bash(PORT=3002 bun dev)",
      "Bash(npx playwright install:*)",
      "Bash(npx playwright test:*)",
      "Bash(del response.json)",
      "mcp__playwright__browser_fill_form",
      "Bash(node:*)",
      "Read(//c/**)",
      "Bash(if not exist claudedocs mkdir claudedocs)",
      "Bash(if not exist \"documentation\\development\" mkdir \"documentation\\development\")",
      "Bash(PORT=3003 bun dev)",
      "mcp__chrome-devtools__take_snapshot",
      "mcp__chrome-devtools__take_screenshot",
      "mcp__chrome-devtools__list_console_messages",
      "mcp__chrome-devtools__navigate_page",
      "mcp__chrome-devtools__wait_for",
      "mcp__chrome-devtools__click",
      "Bash(PORT=3003 bun start)",
      "Bash(PORT=3005 bun start)",
      "mcp__chrome-devtools__evaluate_script",
      "Bash(PORT=3002 bun start)",
      "Bash(if not exist archive mkdir archive)",
      "Bash(npm run dev:*)",
      "Bash(npm run test:*)",
      "mcp__playwright__browser_file_upload",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(npm run test:unit:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm test:*)",
      "Bash(npm run lint)",
      "Bash(set PYTHONPATH=C:JDDBbackendsrc)",
      "Bash(del test_tm_service.py)",
      "mcp__playwright__browser_network_requests",
      "Bash(PORT=3006 npm run dev:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(set PORT=3006)",
      "Bash(npm:*)",
      "Bash(if exist playwright-report rmdir /s /q playwright-report)"
    ],
    "deny": [],
    "ask": []
  }
}
