{
  "permissions": {
    "allow": [
      "Bash(done)",
      "Bash(poetry run alembic:*)",
      "Bash(poetry run python:*)",
      "Bash(poetry run mypy:*)",
      "Bash(poetry add:*)",
      "Bash(find:*)",
      "Bash(git add:*)",
      "Bash(pre-commit run:*)",
      "Bash(python -m mypy:*)",
      "Bash(git commit:*)",
      "Bash(git reset:*)",
      "Bash(git push:*)",
      "Bash(poetry run pytest:*)",
      "Bash(poetry show:*)",
      "Bash(git checkout:*)",
      "Bash(dir:*)",
      "Bash(grep:*)",
      "Bash(poetry run:*)",
      "Bash(bun:*)",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_wait_for",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_close",
      "Bash(curl -X POST \"http://localhost:8000/api/translation-memory/search\" -H \"Content-Type: application/json\" -d '{\"\"source_text\"\": \"\"strategic planning\"\", \"\"source_language\"\": \"\"en\"\", \"\"target_language\"\": \"\"fr\"\", \"\"min_similarity\"\": 0.7, \"\"limit\"\": 5}')",
      "Bash(curl -X POST \"http://localhost:8000/api/translation-memory/search?query_text=strategic+planning&source_language=en&target_language=fr&similarity_threshold=0.7&limit=5\")",
      "Bash(curl -X GET \"http://localhost:8000/api/templates/classifications\")",
      "Bash(curl -X GET \"http://localhost:8000/api/templates/generate/EC?language=en&level=01\")",
      "Bash(curl -X GET \"http://localhost:8000/api/templates/bilingual/PM?level=02\")",
      "Bash(python:*)",
      "Bash(curl:*)",
      "Bash(timeout 20 poetry run pytest tests/unit/test_connection.py -v --tb=short -p no:xdist)",
      "Bash(timeout:*)",
      "Bash(awk:*)",
      "Bash(netstat:*)",
      "Bash(findstr:*)",
      "Bash(taskkill:*)",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_evaluate",
      "WebFetch(domain:wet-boew.github.io)",
      "WebFetch(domain:github.com)",
      "WebSearch",
      "Bash(del nul)",
      "Bash(git restore:*)",
      "Bash(git mv:*)",
      "Bash(tee:*)",
      "Bash(make:*)",
      "Bash(poetry install:*)",
      "WebFetch(domain:www.moshjd.com)",
      "WebFetch(domain:www.hrsg.ca)",
      "WebFetch(domain:hrizons.com)",
      "WebFetch(domain:jdxpert.com)",
      "Bash(cmd /c taskkill:*)",
      "Bash(cmd /c:*)",
      "Bash(move:*)",
      "Bash(test:*)",
      "WebFetch(domain:docs.lightcast.dev)",
      "Bash(del .secrets.new)",
      "mcp__playwright__browser_press_key",
      "Bash(rm:*)",
      "Bash(PORT=3004 bun dev)",
      "Bash(if [ -d \"node_modules\" ])",
      "Bash(then echo \"Node modules installed\")",
      "Bash(else echo \"Node modules NOT installed\")",
      "Bash(fi)",
      "Bash(poetry check:*)",
      "Bash(poetry --version)",
      "Bash(tasklist)",
      "Bash(PORT=3002 bun dev)",
      "Bash(npx playwright install:*)",
      "Bash(npx playwright test:*)",
      "Bash(del response.json)",
      "mcp__playwright__browser_fill_form",
      "Bash(node:*)",
      "Read(//c/**)",
      "Bash(if not exist claudedocs mkdir claudedocs)",
      "Bash(if not exist \"documentation\\development\" mkdir \"documentation\\development\")",
      "Bash(PORT=3003 bun dev)",
      "mcp__chrome-devtools__take_snapshot",
      "mcp__chrome-devtools__take_screenshot",
      "mcp__chrome-devtools__list_console_messages",
      "mcp__chrome-devtools__navigate_page",
      "mcp__chrome-devtools__wait_for",
      "mcp__chrome-devtools__click",
      "Bash(PORT=3003 bun start)",
      "Bash(PORT=3005 bun start)",
      "mcp__chrome-devtools__evaluate_script",
      "Bash(PORT=3002 bun start)",
      "Bash(if not exist archive mkdir archive)",
      "Bash(npm run dev:*)",
      "Bash(npm run test:*)",
      "mcp__playwright__browser_file_upload",
      "mcp__sequential-thinking__sequentialthinking",
      "Bash(npm run test:unit:*)",
      "Bash(npm run type-check:*)",
      "Bash(npm test:*)",
      "Bash(npm run lint)",
      "Bash(set PYTHONPATH=C:JDDBbackendsrc)",
      "Bash(del test_tm_service.py)",
      "mcp__playwright__browser_network_requests",
      "Bash(PORT=3006 npm run dev:*)",
      "Bash(npm run test:e2e:*)",
      "Bash(set PORT=3006)",
      "Bash(npm:*)",
      "Bash(if exist playwright-report rmdir /s /q playwright-report)",
      "SlashCommand(/sc:implement:*)",
      "SlashCommand(/sc:test:*)",
      "Bash(if not exist \"src\\components\\jobs\\__tests__\" mkdir \"src\\components\\jobs\\__tests__\")",
      "Bash(git log -1 --format=\"%H %s\")",
      "SlashCommand(/sc:research latest 2025 job description management system features and best practices)",
      "Bash(poetry lock --check)",
      "Bash(cat pyproject.toml)",
      "Bash(pip index versions psutil)",
      "Bash(jobs -l)",
      "Bash(xargs -r kill)",
      "Bash(poetry lock --no-update)",
      "Bash(poetry lock)",
      "Bash(git rm -r --cached archive sample logs errors test-results playwright-report backend/logs docs/*.log)",
      "Bash(git rm -r --cached archive sample errors test-results playwright-report backend/logs)",
      "Bash(git rm --cached docs/*.log)",
      "Bash(git log --all --source --full-history --diff-filter=A -- \"**/.env\" \"**/.env.local\" \"**/.env.production\" \"**/.env.staging\" \".env\" \".env.local\" --oneline)",
      "Bash(git rev-list --all)",
      "Bash(xargs git grep -l \"sk-\")",
      "Bash(git rm --cached backend/.env .env.local)",
      "Bash(git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch backend/.env .env.local backend/.env.production backend/.env.staging .env .env.production .env.staging\" --prune-empty --tag-name-filter cat -- --all)",
      "Bash(FILTER_BRANCH_SQUELCH_WARNING=1 git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch backend/.env .env.local backend/.env.production backend/.env.staging .env .env.production .env.staging\" --prune-empty --tag-name-filter cat -- --all)",
      "Bash(git log --all --source --full-history -- \"backend/.env\" \".env.local\")",
      "Bash(git log main --source --full-history -- \"backend/.env\" \".env.local\")",
      "Bash(git reflog expire --expire=now --all)",
      "Bash(git gc --prune=now --aggressive)",
      "Bash(cat backend/pyproject.toml)",
      "Bash(gh run view 18638718692)",
      "Bash(gh run view 18638718692 --log-failed)",
      "Bash(gh run watch 18649888198 --interval 10)",
      "Bash(gh run view 18649888198 --log-failed)",
      "Bash(git fetch origin)",
      "Bash(gh run list --limit 1)",
      "Bash(gh run list --workflow=ci.yml --limit 3)",
      "Bash(gh run view 18650300692 --log-failed)",
      "Read(//c//**)",
      "Bash(bunx js-yaml .github/workflows/ci.yml)",
      "Bash(gh run list --limit 5)",
      "Bash(gh issue list --limit 10)",
      "Bash(gh run view 18650942884 --log-failed)",
      "Bash(gh run view 18650942884)",
      "Bash(gh run list --limit 3)",
      "Bash(gh run watch 18664427740 --interval 10)",
      "Bash(gh run view 18664427740 --log-failed)",
      "Bash(gh run view 18664427740 --log)",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18664427740/jobs --jq '.jobs[] | select(.name | contains(\"\"Backend\"\")) | {name: .name, conclusion: .conclusion}')",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18664427740/jobs --jq '.jobs[] | select(.name == \"\"\"\"Backend Tests (3.12)\"\"\"\") | .steps[] | select(.conclusion == \"\"\"\"failure\"\"\"\") | {name: .name, number: .number}')",
      "Bash(gh run view 18664427740 --log --job=18664428043)",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18664427740/jobs --jq '.jobs[] | select(.name == \"\"Backend Tests (3.12)\"\") | .id')",
      "Bash(gh run view 18664427740 --log --job=53212325637)",
      "Bash(gh run list --workflow=\"ci.yml\" --limit 1)",
      "Bash(gh run watch 18664640611 --interval 10)",
      "Bash(gh run view 18664640611 --log --job=53213022888)",
      "Bash(gh run view 18664640611 --log-failed)",
      "Bash(gh run watch 18664863820 --interval 10)",
      "Bash(gh run view 18664863820 --log --job=53213769838)",
      "Bash(gh run watch --interval 10)",
      "Bash(gh run watch 18665055092 --interval 10)",
      "Bash(gh run view 18665055092 --log --job=53214375054)",
      "Bash(gh run watch 18665245115 --interval 10)",
      "Bash(gh run view 18665245115 --log-failed)",
      "Bash(gh run view 18665245115 --log)",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18665245115/jobs --jq '.jobs[] | select(.name | contains(\"\"Backend\"\")) | {name: .name, conclusion: .conclusion}')",
      "Bash(gh run watch 18665570151 --interval 10)",
      "Bash(gh run view 18665570151 --log-failed)",
      "Bash(gh run list --workflow=\"CI/CD Pipeline\" --limit 1)",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18669426637/jobs --jq '.jobs[] | {name: .name, conclusion: .conclusion}')",
      "Bash(gh run view 18669426637 --log-failed)",
      "Bash(gh run view 18669426637 --log --job=53217970175)",
      "Bash(gh run view 18669426637 --log)",
      "Bash(cat security-summary.json)",
      "Bash(gh run list --workflow=ci.yml --limit 1)",
      "Bash(gh run watch 18670741004 --interval 10)",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18670741004/jobs --jq '.jobs[] | {name: .name, conclusion: .conclusion}')",
      "Bash(gh run view 18670741004 --log-failed)",
      "Bash(gh run view 18670885818 --json status,conclusion,createdAt --jq '.')",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18670885818/jobs --jq '.jobs[] | {name: .name, conclusion: .conclusion}')",
      "Bash(gh run view 18670885818 --log)",
      "Bash(pip install bandit[toml] --quiet)",
      "Bash(bandit -r src/ -f json -o ../security-scan-local.json)",
      "Bash(gh run watch 18671167992 --interval 10)",
      "Bash(gh run list --workflow=ci.yml --limit 1 --json status,conclusion,name,createdAt --jq '.[0] | {status, conclusion, created: .createdAt}')",
      "Bash(gh run list --workflow=ci.yml --limit 1 --json status,conclusion,name,createdAt --jq '.[0]')",
      "Bash(gh run view 18671167992 --log-failed)",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18671167992/jobs --jq '.jobs[] | select(.name | contains(\"\"Security\"\")) | {name: .name, conclusion: .conclusion}')",
      "Bash(bandit -r src/ -f json -o ../security-scan-updated.json)",
      "Bash(cat ../security-scan-updated.json)",
      "Bash(gh run list --limit 1 --workflow=ci.yml --json databaseId,status,conclusion,createdAt,displayTitle --jq '.[0] | \"\"Run ID: \\(.databaseId)\\nStatus: \\(.status)\\nConclusion: \\(.conclusion)\\nCreated: \\(.createdAt)\\nTitle: \\(.displayTitle)\"\"')",
      "Bash(gh run watch 18681110553 --interval 10)",
      "Bash(gh run view 18681110553 --log --job=53262263212)",
      "Bash(gh run download 18681110553 --name \"security-scan-results-53f992fc9cc8263cb0a3f9fd952906ee59f64143\" --dir ci-security-results)",
      "Bash(gh run watch 18697541172 --interval 10)",
      "Bash(gh run view 18697541172 --log-failed)",
      "Bash(gh run download 18697541172 --name \"security-scan-results-630106326569cf13354e9d7b3c02a3d96cf856da\")",
      "Bash(gh run view 18697541172 --json artifacts --jq '.artifacts[] | .name')",
      "Bash(gh api repos/fortinpy85/jddb/actions/runs/18697541172/artifacts --jq '.artifacts[] | .name')",
      "Bash(gh run download 18697541172 --name \"security-scan-results-630106325c1852305ac839a3f3883cd158721900\")",
      "Bash(gh run list --limit 1 --workflow=ci.yml --json databaseId,status,conclusion,displayTitle --jq '.[0] | \"\"Run ID: \\(.databaseId)\\nStatus: \\(.status)\\nTitle: \\(.displayTitle)\"\"')",
      "Bash(gh run view 18698452636 --json conclusion,jobs --jq '{conclusion: .conclusion, jobs: [.jobs[] | {name: .name, conclusion: .conclusion}]}')",
      "Bash(gh run view 18698452636 --log --job 53323074806)",
      "Bash(if [ -f security-scan-updated.json ])",
      "Bash(then python -c \"\nimport json\nwith open(''security-scan-updated.json'', ''r'') as f:\n    data = json.load(f)\nprint(''Local Bandit Scan Results:'')\nprint(''='' * 60)\nprint(f''Total issues: {len(data.get(\"\"results\"\", []))}'')\nfor result in data.get(''results'', []):\n    print(f\"\"Severity: {result.get(''issue_severity'', ''N/A'')}\"\")\n    print(f\"\"File: {result.get(''filename'', ''N/A'')}:{result.get(''line_number'', ''N/A'')}\"\")\n    print(f\"\"Issue: {result.get(''issue_text'', ''N/A'')}\"\")\n    print(''-'' * 60)\n\")",
      "Bash(else echo \"File not found\")",
      "Bash(gh run watch 18699336208 --interval 10)",
      "Bash(gh run view 18699336208 --log-failed)",
      "Bash(gh run view 18699336208 --log --job=53324453355)",
      "Bash(if not exist \"archive\\docs\" mkdir \"archive\\docs\")",
      "Bash(if not exist \"archive\\claudedocs\" mkdir \"archive\\claudedocs\")"
    ],
    "deny": [],
    "ask": []
  }
}
